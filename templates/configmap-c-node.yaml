apiVersion: v1
kind: ConfigMap
metadata:
  name: ergw-gtp-c-configmap-{{ template "ergw.fullname" . }}
  namespace: default
  labels:
    app: {{ template "ergw.name" . }}
    chart: {{ template "ergw.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    apn: {{ .Values.labels.apn }}
    stage: {{ .Values.labels.stage }}
data:
  ergw-gtp-c-node.config: |
    [{setup, [{data_dir, "/var/lib/ergw"},
    	  {log_dir,  "/var/log/gtp-c-node"}             %% NOTE: lager is not using this
    	 ]},

     {ergw, [{'$setup_vars',
    	  [{"ORIGIN", {value, "epc.mnc003.mcc232.3gppnetwork.org"}}]},

    	 {http_api,
    	  [{port, 8080},
    	   {ip, {0,0,0,0}}
    	  ]},
         {plmn_id, { {{.Values.Cnode.plmnID }}}},

    	 {sockets,
    	  [{cp, [{type, 'gtp-u'},
         {ip,  {{ splitList "/" .Values.Cnode.sxb | first | include "to.erlang.ip" }}},
    		 {vrf, cp}
    		]},
    	   {epc, [{type, 'gtp-c'},
          {ip,  {{ splitList "/" .Values.Cnode.grx | first | include "to.erlang.ip" }}},
    		  {vrf, epc}
    		 ]}
    	  ]},

    	 {vrfs,
    	  [{sgi, [{pools, [{{ template "to.erlang.ip" .Values.vrfs.pools.IPv4 }},
    	            {{ template "to.erlang.ip" .Values.vrfs.pools.IPv61 }},
    	            {{ template "to.erlang.ip" .Values.vrfs.pools.IPv62 }}
    	          ]},
    		  {'MS-Primary-DNS-Server', {{template "to.erlang.ip" .Values.vrfs.MSPrimaryDNS}}},
    		  {'MS-Secondary-DNS-Server', {{template "to.erlang.ip" .Values.vrfs.MSSecondaryDNS}}},
    		  {'MS-Primary-NBNS-Server', {{template "to.erlang.ip" .Values.vrfs.MSPrimaryNBNS}}},
    		  {'MS-Secondary-NBNS-Server', {{template "to.erlang.ip" .Values.vrfs.MSPrimaryNBNS}}},
    		  {'DNS-Server-IPv6-Address',
    		  [{{template "to.erlang.ip" .Values.vrfs.DNSServerIPv6AddressPart1}},
    		   {{template "to.erlang.ip" .Values.vrfs.DNSServerIPv6AddressPart2}}]}
    		 ]}
    	  ]},

    	 {sx_socket,
    	  [{node, 'ergw'},
    	   {name, 'ergw'},
    	   {socket, cp},
    	   {ip,  {{ splitList "/" .Values.Cnode.sxb | first | include "to.erlang.ip" }}}
    	  ]},

    	 {handlers,
    	  [{h1,   [{handler, pgw_s5s8},
    		   {protocol, gn},
    		   {sockets, ['epc']},
    		   {node_selection, [default]}
    		  ]},
    	   {h2, [{handler, pgw_s5s8},
    		 {protocol, s5s8},
    		 {sockets, ['epc']},
    		 {node_selection, [default]}
    		]}
    	  ]},

    	 {apns,
    	  [{[<<"{{ .Values.APN.HostName }}">>, <<"{{ .Values.APN.DomainName }}">>, <<"{{ .Values.APN.tld }}">>], [{vrf, sgi}]},
    	   {'_', [{vrf, sgi}]}                         %% wildcard APN
    	  ]},

    	 {node_selection,
    	  [{default,
    	    {static,
    	     [
    	      %% APN NAPTR alternative
    	      {"_default.apn.$ORIGIN", {300,64536},
    	       [{"x-3gpp-pgw","x-s5-gtp"},{"x-3gpp-pgw","x-s8-gtp"},
    		{"x-3gpp-pgw","x-gn"},{"x-3gpp-pgw","x-gp"}],
    	       "topon.s5s8.pgw.$ORIGIN"},
    	      {"_default.apn.$ORIGIN", {300,64536},
    	       [{"x-3gpp-upf","x-sxb"}],
    	       "topon.sx.prox01.$ORIGIN"},

    	      %% A/AAAA record alternatives
    	      {"topon.s5s8.pgw.$ORIGIN", [{{ splitList "/" .Values.VPP.grx | first | include "to.erlang.ip" -}}], []},
    	      {"topon.sx.prox01.$ORIGIN",[{{ splitList "/" .Values.VPP.sxb | first | include "to.erlang.ip" -}}], []}
    	     ]
    	    }
    	   }
    	  ]
    	 },

    	 {nodes,
    	  [{default,
    	    [{vrfs,
    	      [{cp, [{features, ['CP-Function']}]},
    	       {epc, [{features, ['Access']}]},
    	       {sgi, [{features, ['SGi-LAN']}]}]
    	     }]
    	   }]
    	 }
    	]},

     {ergw_aaa, [
    	     {ergw_aaa_provider, {ergw_aaa_mock, [{shared_secret, <<"MySecret">>}]}}
    	    ]},

     {hackney, [
    	    {mod_metrics, exometer}
    	   ]},

     {jobs, [{samplers,
    	  [{cpu_feedback, jobs_sampler_cpu, []}
    	  ]},
    	 {queues,
    	  [{path_restart,
    	    [{regulators, [{counter, [{limit, 100}]}]},
    	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
    	    ]},
    	   {create,
    	    [{max_time, 5000}, %% max 5 seconds
    	     {regulators, [{rate, [{limit, 50}]}]},
    	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
    	    ]},
    	   {delete,
    	    [{regulators, [{counter, [{limit, 100}]}]},
    	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
    	    ]},
    	   {other,
    	    [{max_time, 10000}, %% max 10 seconds
    	     {regulators, [{rate, [{limit, 1000}]}]},
    	     {modifiers,  [{cpu_feedback, 10}]} %% 10 = % increment by which to modify the limit
    	    ]}
    	  ]}
    	]},

     {lager, [
    	  {log_root, "/var/log/gtp-c-node"},
    	  {colored, true},
    	  {error_logger_redirect, true},
    	  {crash_log, "crash.log"},
    	  {error_logger_hwm, 5000},
    	  {handlers, [
    		      {lager_console_backend, [{level, debug}]},
    		      {lager_file_backend, [{file, "error.log"}, {level, error}]},
    		      {lager_file_backend, [{file, "console.log"}, {level, debug}]}
    		     ]}
    	 ]}
    ].
